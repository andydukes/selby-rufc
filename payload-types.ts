/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    teams: Team;
    players: Player;
    matches: Match;
    sponsors: Sponsor;
    content: Content;
    media: Media;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    teams: TeamsSelect<false> | TeamsSelect<true>;
    players: PlayersSelect<false> | PlayersSelect<true>;
    matches: MatchesSelect<false> | MatchesSelect<true>;
    sponsors: SponsorsSelect<false> | SponsorsSelect<true>;
    content: ContentSelect<false> | ContentSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name: string;
  role: 'admin' | 'editor' | 'viewer';
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "teams".
 */
export interface Team {
  id: string;
  name: string;
  category: 'mens' | 'ladies' | 'junior-girls' | 'junior-boys';
  /**
   * e.g., U12, U14, U16, 1st XV, 2nd XV
   */
  ageGroup?: string | null;
  logo?: (string | null) | Media;
  description?: string | null;
  active?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    tablet?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "players".
 */
export interface Player {
  id: string;
  name: string;
  number: number;
  team: string | Team;
  position:
    | 'loose-head-prop'
    | 'hooker'
    | 'tight-head-prop'
    | 'second-row'
    | 'blindside-flanker'
    | 'outside-flanker'
    | 'number-8'
    | 'scrum-half'
    | 'fly-half'
    | 'inside-centre'
    | 'outside-centre'
    | 'left-wing'
    | 'right-wing'
    | 'manager'
    | 'coach'
    | 'assistant-coach'
    | 'physio'
    | 'not-specified';
  photo?: (string | null) | Media;
  bio?: string | null;
  stats?: {
    appearances?: number | null;
    tries?: number | null;
    conversions?: number | null;
    penalties?: number | null;
    points?: number | null;
  };
  socialLinks?: {
    twitter?: string | null;
    instagram?: string | null;
  };
  /**
   * Individual sponsor for this player
   */
  sponsor?: (string | null) | Sponsor;
  active?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sponsors".
 */
export interface Sponsor {
  id: string;
  name: string;
  /**
   * Player sponsors support individuals, Team sponsors support specific teams, Club sponsors support the whole club
   */
  type: 'player' | 'team' | 'club';
  /**
   * Logo for carousel and player cards
   */
  logo: string | Media;
  /**
   * Full-page JPEG that opens when logo is clicked
   */
  advertisement?: (string | null) | Media;
  website?: string | null;
  description?: string | null;
  /**
   * For player sponsors only - which player does this sponsor support?
   */
  linkedPlayer?: (string | null) | Player;
  /**
   * For team sponsors only - which team does this sponsor support?
   */
  linkedTeam?: (string | null) | Team;
  /**
   * Lower numbers appear first in carousel
   */
  displayOrder?: number | null;
  active?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "matches".
 */
export interface Match {
  id: string;
  /**
   * e.g., "Selby RUFC vs Yorkshire Vikings"
   */
  title: string;
  team: string | Team;
  opponent: string;
  kickOffTime: string;
  groundInfo?: string | null;
  /**
   * e.g., "Sunny, 15Â°C"
   */
  weather?: string | null;
  teamSheet?:
    | {
        player: string | Player;
        position: 'starting' | 'substitute';
        jerseyNumber?: number | null;
        id?: string | null;
      }[]
    | null;
  score?: {
    home?: number | null;
    away?: number | null;
  };
  status: 'scheduled' | 'live' | 'halftime' | 'fulltime' | 'cancelled';
  /**
   * Live updates during the match
   */
  events?:
    | {
        time: number;
        type: 'try' | 'conversion' | 'penalty' | 'yellow-card' | 'red-card' | 'substitution' | 'other';
        description: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "content".
 */
export interface Content {
  id: string;
  title: string;
  /**
   * URL-friendly identifier (e.g., "chairmans-welcome")
   */
  slug: string;
  section: 'chairmans-welcome' | 'juniors-update' | 'club-news' | 'community' | 'general';
  body: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Short summary for previews
   */
  excerpt?: string | null;
  featuredImage?: (string | null) | Media;
  author?: string | null;
  publishedDate?: string | null;
  status: 'draft' | 'published';
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'teams';
        value: string | Team;
      } | null)
    | ({
        relationTo: 'players';
        value: string | Player;
      } | null)
    | ({
        relationTo: 'matches';
        value: string | Match;
      } | null)
    | ({
        relationTo: 'sponsors';
        value: string | Sponsor;
      } | null)
    | ({
        relationTo: 'content';
        value: string | Content;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  role?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "teams_select".
 */
export interface TeamsSelect<T extends boolean = true> {
  name?: T;
  category?: T;
  ageGroup?: T;
  logo?: T;
  description?: T;
  active?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "players_select".
 */
export interface PlayersSelect<T extends boolean = true> {
  name?: T;
  number?: T;
  team?: T;
  position?: T;
  photo?: T;
  bio?: T;
  stats?:
    | T
    | {
        appearances?: T;
        tries?: T;
        conversions?: T;
        penalties?: T;
        points?: T;
      };
  socialLinks?:
    | T
    | {
        twitter?: T;
        instagram?: T;
      };
  sponsor?: T;
  active?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "matches_select".
 */
export interface MatchesSelect<T extends boolean = true> {
  title?: T;
  team?: T;
  opponent?: T;
  kickOffTime?: T;
  groundInfo?: T;
  weather?: T;
  teamSheet?:
    | T
    | {
        player?: T;
        position?: T;
        jerseyNumber?: T;
        id?: T;
      };
  score?:
    | T
    | {
        home?: T;
        away?: T;
      };
  status?: T;
  events?:
    | T
    | {
        time?: T;
        type?: T;
        description?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sponsors_select".
 */
export interface SponsorsSelect<T extends boolean = true> {
  name?: T;
  type?: T;
  logo?: T;
  advertisement?: T;
  website?: T;
  description?: T;
  linkedPlayer?: T;
  linkedTeam?: T;
  displayOrder?: T;
  active?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "content_select".
 */
export interface ContentSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  section?: T;
  body?: T;
  excerpt?: T;
  featuredImage?: T;
  author?: T;
  publishedDate?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        tablet?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}